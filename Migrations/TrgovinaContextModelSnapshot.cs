// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SeminarskaNaloga.Data;

#nullable disable

namespace SeminarskaNaloga.Migrations
{
    [DbContext(typeof(TrgovinaContext))]
    partial class TrgovinaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SeminarskaNaloga.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TrgovinaId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("priimek")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("TrgovinaId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SeminarskaNaloga.Models.Artikel", b =>
                {
                    b.Property<int>("ArtikelId")
                        .HasColumnType("int");

                    b.Property<int?>("NarociloId")
                        .HasColumnType("int");

                    b.Property<int?>("TrgovinaId")
                        .HasColumnType("int");

                    b.Property<double>("cena")
                        .HasColumnType("float");

                    b.Property<string>("img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("vrstaArtiklaId")
                        .HasColumnType("int");

                    b.HasKey("ArtikelId");

                    b.HasIndex("NarociloId");

                    b.HasIndex("TrgovinaId");

                    b.HasIndex("vrstaArtiklaId");

                    b.ToTable("Artikel", (string)null);
                });

            modelBuilder.Entity("SeminarskaNaloga.Models.Lastnik", b =>
                {
                    b.Property<int>("LastnikId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LastnikId"), 1L, 1);

                    b.Property<int?>("TrgovinaId")
                        .HasColumnType("int");

                    b.HasKey("LastnikId");

                    b.HasIndex("TrgovinaId");

                    b.ToTable("Lastnik", (string)null);
                });

            modelBuilder.Entity("SeminarskaNaloga.Models.Narocilo", b =>
                {
                    b.Property<int>("NarociloId")
                        .HasColumnType("int");

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("kolicina")
                        .HasColumnType("int");

                    b.Property<double>("skupnaCena")
                        .HasColumnType("float");

                    b.HasKey("NarociloId");

                    b.HasIndex("AppUserId");

                    b.ToTable("Narocilo", (string)null);
                });

            modelBuilder.Entity("SeminarskaNaloga.Models.Ocena", b =>
                {
                    b.Property<int>("OcenaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OcenaId"), 1L, 1);

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ArtikelId")
                        .HasColumnType("int");

                    b.Property<string>("Komentar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("vrednostOcene")
                        .HasColumnType("int");

                    b.HasKey("OcenaId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ArtikelId");

                    b.ToTable("Ocena", (string)null);
                });

            modelBuilder.Entity("SeminarskaNaloga.Models.Trgovina", b =>
                {
                    b.Property<int>("TrgovinaId")
                        .HasColumnType("int");

                    b.Property<string>("ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("img")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TrgovinaId");

                    b.ToTable("Trgovina", (string)null);
                });

            modelBuilder.Entity("SeminarskaNaloga.Models.vrstaArtikla", b =>
                {
                    b.Property<int>("vrstaArtiklaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("vrstaArtiklaId"), 1L, 1);

                    b.Property<string>("opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("vrsta")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("vrstaArtiklaId");

                    b.ToTable("vrstaArtikla", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SeminarskaNaloga.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SeminarskaNaloga.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SeminarskaNaloga.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SeminarskaNaloga.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SeminarskaNaloga.Models.AppUser", b =>
                {
                    b.HasOne("SeminarskaNaloga.Models.Trgovina", "Trgovina")
                        .WithMany()
                        .HasForeignKey("TrgovinaId");

                    b.Navigation("Trgovina");
                });

            modelBuilder.Entity("SeminarskaNaloga.Models.Artikel", b =>
                {
                    b.HasOne("SeminarskaNaloga.Models.Narocilo", null)
                        .WithMany("Artikli")
                        .HasForeignKey("NarociloId");

                    b.HasOne("SeminarskaNaloga.Models.Trgovina", null)
                        .WithMany("Artikli")
                        .HasForeignKey("TrgovinaId");

                    b.HasOne("SeminarskaNaloga.Models.vrstaArtikla", "vrstaArtikla")
                        .WithMany("Artikeli")
                        .HasForeignKey("vrstaArtiklaId");

                    b.Navigation("vrstaArtikla");
                });

            modelBuilder.Entity("SeminarskaNaloga.Models.Lastnik", b =>
                {
                    b.HasOne("SeminarskaNaloga.Models.Trgovina", "Trgovina")
                        .WithMany()
                        .HasForeignKey("TrgovinaId");

                    b.Navigation("Trgovina");
                });

            modelBuilder.Entity("SeminarskaNaloga.Models.Narocilo", b =>
                {
                    b.HasOne("SeminarskaNaloga.Models.AppUser", "AppUser")
                        .WithMany("Narocila")
                        .HasForeignKey("AppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("SeminarskaNaloga.Models.Ocena", b =>
                {
                    b.HasOne("SeminarskaNaloga.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");

                    b.HasOne("SeminarskaNaloga.Models.Artikel", "Artikel")
                        .WithMany("Ocene")
                        .HasForeignKey("ArtikelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Artikel");
                });

            modelBuilder.Entity("SeminarskaNaloga.Models.AppUser", b =>
                {
                    b.Navigation("Narocila");
                });

            modelBuilder.Entity("SeminarskaNaloga.Models.Artikel", b =>
                {
                    b.Navigation("Ocene");
                });

            modelBuilder.Entity("SeminarskaNaloga.Models.Narocilo", b =>
                {
                    b.Navigation("Artikli");
                });

            modelBuilder.Entity("SeminarskaNaloga.Models.Trgovina", b =>
                {
                    b.Navigation("Artikli");
                });

            modelBuilder.Entity("SeminarskaNaloga.Models.vrstaArtikla", b =>
                {
                    b.Navigation("Artikeli");
                });
#pragma warning restore 612, 618
        }
    }
}
